/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import DataIngestion.DBIntegrator;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Rectangle;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import model.GameDrawResults;
import model.GameDrawResultsPK;

import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.ChartFactory;

import tzokerstats.GUIValidationException;

import model.WinningColumn;
import model.WinningColumnPK;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;

/**
 *
 * @author Panes
 */
public class StatsChartsFrame extends javax.swing.JFrame {

    /**
     * Creates new form ChartsDataFrame
     */
    public StatsChartsFrame() {
        initComponents();
        progressBar.setVisible(false);
        jXDatePickerFrom.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
        jXDatePickerTo.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
    }
    private MenuOverlay menuOverlay = new MenuOverlay();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPnlMain = new javax.swing.JPanel();
        JPnlFiller = new javax.swing.JPanel();
        JPnlDisplayResult = new javax.swing.JPanel();
        JLbShowResultsText = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        JLbShowResultsIcon = new javax.swing.JLabel();
        JPnlDateRange = new javax.swing.JPanel();
        JLbFromDate = new javax.swing.JLabel();
        jXDatePickerFrom = new org.jdesktop.swingx.JXDatePicker();
        jXDatePickerTo = new org.jdesktop.swingx.JXDatePicker();
        JLbToDate = new javax.swing.JLabel();
        JPnlStatsSelection = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        JLbDateRangeTitle = new javax.swing.JLabel();
        JLbStatsTitle = new javax.swing.JLabel();
        JPnlChartContainer = new javax.swing.JPanel();
        displayChartPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JPnlMain.setBackground(new java.awt.Color(190, 139, 6));

        JPnlFiller.setBackground(new java.awt.Color(190, 139, 6));

        javax.swing.GroupLayout JPnlFillerLayout = new javax.swing.GroupLayout(JPnlFiller);
        JPnlFiller.setLayout(JPnlFillerLayout);
        JPnlFillerLayout.setHorizontalGroup(
            JPnlFillerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );
        JPnlFillerLayout.setVerticalGroup(
            JPnlFillerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        JPnlDisplayResult.setBackground(new java.awt.Color(190, 139, 6));
        JPnlDisplayResult.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JPnlDisplayResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JPnlDisplayResultMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JPnlDisplayResultMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JPnlDisplayResultMouseExited(evt);
            }
        });

        JLbShowResultsText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLbShowResultsText.setForeground(new java.awt.Color(255, 255, 255));
        JLbShowResultsText.setText("Εμφάνιση Αποτελεσμάτων");

        JLbShowResultsIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/play-32.png"))); // NOI18N

        javax.swing.GroupLayout JPnlDisplayResultLayout = new javax.swing.GroupLayout(JPnlDisplayResult);
        JPnlDisplayResult.setLayout(JPnlDisplayResultLayout);
        JPnlDisplayResultLayout.setHorizontalGroup(
            JPnlDisplayResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPnlDisplayResultLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JLbShowResultsIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JLbShowResultsText, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(161, 161, 161))
        );
        JPnlDisplayResultLayout.setVerticalGroup(
            JPnlDisplayResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlDisplayResultLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPnlDisplayResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JLbShowResultsText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JLbShowResultsIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                .addContainerGap())
        );

        JPnlDateRange.setBackground(new java.awt.Color(190, 139, 6));
        JPnlDateRange.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        JLbFromDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLbFromDate.setForeground(new java.awt.Color(255, 255, 255));
        JLbFromDate.setText("Από:");

        jXDatePickerFrom.setMaximumSize(new java.awt.Dimension(117, 24));
        jXDatePickerFrom.setMinimumSize(new java.awt.Dimension(117, 24));

        JLbToDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLbToDate.setForeground(new java.awt.Color(255, 255, 255));
        JLbToDate.setText("Έως:");

        javax.swing.GroupLayout JPnlDateRangeLayout = new javax.swing.GroupLayout(JPnlDateRange);
        JPnlDateRange.setLayout(JPnlDateRangeLayout);
        JPnlDateRangeLayout.setHorizontalGroup(
            JPnlDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlDateRangeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JLbFromDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXDatePickerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JLbToDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXDatePickerTo, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(94, 94, 94))
        );
        JPnlDateRangeLayout.setVerticalGroup(
            JPnlDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlDateRangeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPnlDateRangeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePickerFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePickerTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JLbToDate)
                    .addComponent(JLbFromDate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JPnlStatsSelection.setBackground(new java.awt.Color(190, 139, 6));
        JPnlStatsSelection.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Συχνότητα εμφάνισης αριθμών", "Συχνότητα εμφάνισης αριθμών Joker", "Μέσος όρος κερδών ανά κατηγορία", "Μέσος όρος κερδών ανά κατηγορία(πίτα)" }));

        javax.swing.GroupLayout JPnlStatsSelectionLayout = new javax.swing.GroupLayout(JPnlStatsSelection);
        JPnlStatsSelection.setLayout(JPnlStatsSelectionLayout);
        JPnlStatsSelectionLayout.setHorizontalGroup(
            JPnlStatsSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlStatsSelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JPnlStatsSelectionLayout.setVerticalGroup(
            JPnlStatsSelectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlStatsSelectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JLbDateRangeTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLbDateRangeTitle.setForeground(new java.awt.Color(255, 255, 255));
        JLbDateRangeTitle.setText("Επιλογή εύρους ημερομηνιών:");

        JLbStatsTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLbStatsTitle.setForeground(new java.awt.Color(255, 255, 255));
        JLbStatsTitle.setText("Παραγωγή στατιστικών για:");

        JPnlChartContainer.setPreferredSize(new java.awt.Dimension(810, 344));

        progressBar.setPreferredSize(new java.awt.Dimension(146, 15));

        javax.swing.GroupLayout displayChartPanelLayout = new javax.swing.GroupLayout(displayChartPanel);
        displayChartPanel.setLayout(displayChartPanelLayout);
        displayChartPanelLayout.setHorizontalGroup(
            displayChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
        );
        displayChartPanelLayout.setVerticalGroup(
            displayChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayChartPanelLayout.createSequentialGroup()
                .addGap(0, 307, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout JPnlChartContainerLayout = new javax.swing.GroupLayout(JPnlChartContainer);
        JPnlChartContainer.setLayout(JPnlChartContainerLayout);
        JPnlChartContainerLayout.setHorizontalGroup(
            JPnlChartContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlChartContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        JPnlChartContainerLayout.setVerticalGroup(
            JPnlChartContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlChartContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout JPnlMainLayout = new javax.swing.GroupLayout(JPnlMain);
        JPnlMain.setLayout(JPnlMainLayout);
        JPnlMainLayout.setHorizontalGroup(
            JPnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlMainLayout.createSequentialGroup()
                .addGroup(JPnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPnlMainLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(JLbStatsTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JLbDateRangeTitle)
                        .addGap(301, 301, 301))
                    .addGroup(JPnlMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(JPnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JPnlMainLayout.createSequentialGroup()
                                .addComponent(JPnlStatsSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JPnlDateRange, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JPnlDisplayResult, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(JPnlChartContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)))
                .addComponent(JPnlFiller, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        JPnlMainLayout.setVerticalGroup(
            JPnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPnlMainLayout.createSequentialGroup()
                .addGroup(JPnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JLbStatsTitle)
                    .addComponent(JLbDateRangeTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(JPnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JPnlDisplayResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(JPnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(JPnlStatsSelection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JPnlDateRange, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JPnlChartContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JPnlFiller, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(JPnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPnlMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JPnlDisplayResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDisplayResultMouseClicked

        if (!JPnlDisplayResult.isEnabled()) {
            return;
        }        
        menuOverlay.setEnabled(JPnlDisplayResult, false);
        startWaiting((JPanel) evt.getSource());
        
        //Start Waiting
        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                
                try {
                    // Check if dates have been selected
                    jXDatePickerFrom.commitEdit();
                    if (jXDatePickerFrom.getDate() == null) {
                        throw new GUIValidationException(
                                "Παρακαλώ εισάγετε αρχική ημερομηνία.");
                    }
                    jXDatePickerTo.commitEdit();
                    if (jXDatePickerTo.getDate() == null) {
                        throw new GUIValidationException(
                                "Παρακαλώ εισάγετε τελική ημερομηνία.");
                    }
                    // Get selected dates
                    Date selectedDateFrom = jXDatePickerFrom.getDate();
                    Date selectedDateTo = jXDatePickerTo.getDate();
                    // Retrieve records from database depending on selected date range 
                    ArrayList<WinningColumn> dateRangeResults = 
                            DBIntegrator.getWinningColumnByDateRange(
                                    selectedDateFrom, selectedDateTo);
                    if (dateRangeResults.size() < 1) {
                        throw new GUIValidationException("Δεν βρέθηκαν αποτελέσματα "
                                + "γι΄αυτό το εύρος ημερομηνιών στη βάση δεδομένων.");
                    } else {
                        displayChartPanel.removeAll();
                        if ("Μέσος όρος κερδών ανά κατηγορία(πίτα)".equals(
                                String.valueOf(jComboBox1.getSelectedItem()))) {
                            generatePieChart(dateRangeResults);
                        } else {
                            generateBarChart(dateRangeResults);
                        }
                    }
                } catch (GUIValidationException e) {
                    JOptionPane.showMessageDialog(null, "Παρουσιάστηκε σφάλμα. " +
                            e.getMessage(),
                            "Δεν Αντλήθηκαν δεδομένα.",
                            JOptionPane.ERROR_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Παρουσιάστηκε "
                            + "σφάλμα κατα την άντληση από την βάση δεδομένων." + 
                            e.getMessage(), "Δεν Αντλήθηκαν δεδομένα.", 
                            JOptionPane.ERROR_MESSAGE);
                    System.out.println(e);
                } finally {
                        stopWaiting();
                        //menuOverlay.setEnabled(JPnlInsertToDB, false);
                        menuOverlay.setEnabled((JPanel) evt.getSource(), true);
                    }
                return null;
            }
        };
        mySwingWorker.execute();
    }//GEN-LAST:event_JPnlDisplayResultMouseClicked

    private void JPnlDisplayResultMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDisplayResultMouseEntered
        // TODO add your handling code here:
        menuOverlay.setHilighted((JPanel) evt.getSource(), true);
    }//GEN-LAST:event_JPnlDisplayResultMouseEntered

    private void JPnlDisplayResultMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDisplayResultMouseExited
        // TODO add your handling code here:
        menuOverlay.setHilighted((JPanel) evt.getSource(), false);
    }//GEN-LAST:event_JPnlDisplayResultMouseExited

    // Generates suitable bar charts with given WinningColumn data.
    private void generateBarChart(ArrayList<WinningColumn> dateRangeResults) {
        // Create jfreechart dataset instance
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        String categoryAxisString = "";
        String valueAxisString = "";
        double maximumBarWidth = 0;
        /* Populate dataset and specify bar chart parameters bar width and 
        category description depending on selected combo box option */
        if ("Συχνότητα εμφάνισης αριθμών".equals(String.valueOf(
                jComboBox1.getSelectedItem()))) {
            categoryAxisString = "Νούμερο";
            valueAxisString = "Συχνότητα Εμφάνισης";
            ArrayList<Integer> numbers = new ArrayList();
            int[] occurrences = new int[46];;

            for (WinningColumn winningColumn : dateRangeResults) {
                numbers.add(winningColumn.getN1());
                numbers.add(winningColumn.getN2());
                numbers.add(winningColumn.getN3());
                numbers.add(winningColumn.getN4());
                numbers.add(winningColumn.getN5());
            }

            for (int a : numbers) {
                occurrences[a]++;
            }

            for (int i = 1; i < occurrences.length; i++) {
                Integer numberInt = i;
                String number = numberInt.toString();
                dataset.setValue(occurrences[i], "", number);
            }
            maximumBarWidth = 0.018; 
        } else if ("Συχνότητα εμφάνισης αριθμών Joker".equals(
                String.valueOf(jComboBox1.getSelectedItem()))) {
            categoryAxisString = "Νούμερο";
            valueAxisString = "Συχνότητα Εμφάνισης";
            ArrayList<Integer> numbers = new ArrayList();
            int[] occurrences = new int[21];

            for (WinningColumn winningColumn : dateRangeResults) {
                numbers.add(winningColumn.getJ1());
            }

            for (int a : numbers) {
                occurrences[a]++;
            }

            for (int i = 1; i < occurrences.length; i++) {
                Integer numberInt = i;
                String number = numberInt.toString();
                dataset.setValue(occurrences[i], "", number);
            }
            maximumBarWidth = 0.04;
        } else { // "Μέσος όρος κερδών ανά κατηγορία" selected
            categoryAxisString = "Κατηγορία";
            valueAxisString = "Συνολικά Κέρδη";
            ArrayList<Integer> drawIds = new ArrayList();
            double[] payoutAmnt = new double[9];
            int gameCounter = 0;
            // Extract drawIds from aquired WiiningColumn records
            for (WinningColumn winningColumn : dateRangeResults) {
                WinningColumnPK pK = winningColumn.getWinningColumnPK();
                drawIds.add(pK.getDrawId());
            }
            // Retrieve GameDrawResults records of drawIds specified above
            ArrayList<ArrayList<GameDrawResults>> totalGameDrawResults = 
                    DBIntegrator.getDrawResultsByDrawId(drawIds, 5104);
            for (ArrayList<GameDrawResults>singleGameDrawResults:totalGameDrawResults) {
                gameCounter += 1;
                for (GameDrawResults drawResults : singleGameDrawResults) {
                    double totalPayout = drawResults.getTotalPayout();
                    GameDrawResultsPK gameDrawResultsPK = 
                            drawResults.getGameDrawResultsPK();
                    Integer categoryDescr = Integer.valueOf(
                            gameDrawResultsPK.getWinningCategoryDescr());
                    payoutAmnt[categoryDescr] += totalPayout;
                }
            }
            for (int i = 1; i < payoutAmnt.length; i++) {
                String categoryDesc = new String();
                // Define category description
                switch (i) {
                    case 1:
                        categoryDesc = "5+1";
                        break;
                    case 2:
                        categoryDesc = "5";
                        break;
                    case 3:
                        categoryDesc = "4+1";
                        break;
                    case 4:
                        categoryDesc = "4";
                        break;
                    case 5:
                        categoryDesc = "3+1";
                        break;
                    case 6:
                        categoryDesc = "3";
                        break;
                    case 7:
                        categoryDesc = "2+1";
                        break;
                    case 8:
                        categoryDesc = "1+1";
                        break;
                }
                dataset.setValue(removeDecimal((
                        payoutAmnt[i] / gameCounter), 1), "", categoryDesc);
            }
            maximumBarWidth = 0.1;
        }
        
        // Chart axis instantiation and settings
        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisString);
        categoryAxis.setLowerMargin(.01);
        categoryAxis.setCategoryMargin(.01);
        categoryAxis.setUpperMargin(.01);
        categoryAxis.setCategoryLabelPositions(CategoryLabelPositions.STANDARD);
        
        ValueAxis valueAxis = new NumberAxis(valueAxisString); 
        valueAxis.setAxisLineVisible( false );
        valueAxis.setTickMarksVisible( false );

        // Create chart bar rednerer(settings must be defined after theme is applied)
        StackedBarRenderer renderer = new StackedBarRenderer();
        
        // Create CategoryPlot instance with axis and renderer parameters specified above
        CategoryPlot plot = new CategoryPlot(dataset,
                categoryAxis,
                valueAxis,
                renderer);
        
        // CategoryPlot settings
        plot.setOrientation(PlotOrientation.VERTICAL);
        plot.getRangeAxis().setStandardTickUnits( 
                NumberAxis.createIntegerTickUnits() );
        plot.setOutlineVisible( false );
        plot.setRangeGridlineStroke( new BasicStroke() );

        // Create chart instace
        JFreeChart chart = new JFreeChart("",
                JFreeChart.DEFAULT_TITLE_FONT,
                plot,
                true);

        // Create chart theme and specify colors
        StandardChartTheme theme = (StandardChartTheme)org.jfree.chart.
                StandardChartTheme.createJFreeTheme();
        theme.setRangeGridlinePaint( new java.awt.Color(192, 192, 192));
        theme.setPlotBackgroundPaint( Color.white );
        theme.setChartBackgroundPaint( Color.white );
        theme.setGridBandPaint( Color.red );
        theme.setAxisOffset( new RectangleInsets(0,0,0,0) );
        theme.setBarPainter(new StandardBarPainter());
        theme.apply( chart );
        // Chart specific settings
        chart.removeLegend(); 
        chart.setTextAntiAlias( true );
        chart.setAntiAlias( true );
        
        // Bar renderer settings(bar width, bar & label color, shadow e.t.c)
        renderer.setSeriesPaint(0, new java.awt.Color(50, 122, 194));
        renderer.setDefaultItemLabelPaint(new java.awt.Color(245, 245, 245));
        renderer.setMaximumBarWidth(maximumBarWidth);
        renderer.setSeriesItemLabelsVisible(0, true);
        renderer.setSeriesItemLabelGenerator(0, 
                new StandardCategoryItemLabelGenerator());
        renderer.setShadowVisible( true );
        renderer.setShadowXOffset( 2 );
        renderer.setShadowYOffset( 0 );
        renderer.setShadowPaint( new java.awt.Color(192, 192, 192) );

        ChartPanel chartPanel = new ChartPanel(chart);
        displayChartPanel.setLayout(new java.awt.BorderLayout());
        displayChartPanel.add(chartPanel); // Display Chart
        displayChartPanel.validate();
    }
  
    // Generates pie chart that shows total payout of each joker game category
    private void generatePieChart(ArrayList<WinningColumn> dateRangeResults) {
        DefaultPieDataset dataset = new DefaultPieDataset();

        ArrayList<Integer> drawIds = new ArrayList();
        double[] payoutAmnt = new double[9];
        int gameCounter = 0;
        // Extract drawIds from aquired WiiningColumn records
        for (WinningColumn winningColumn : dateRangeResults) {
            WinningColumnPK pK = winningColumn.getWinningColumnPK();
            drawIds.add(pK.getDrawId());
        }
        // Retrieve GameDrawResults records of drawIds specified above
        ArrayList<ArrayList<GameDrawResults>> totalGameDrawResults = 
                DBIntegrator.getDrawResultsByDrawId(drawIds, 5104);
        for (ArrayList<GameDrawResults> singleGameDrawResults : totalGameDrawResults) {
            gameCounter += 1;
            for (GameDrawResults drawResults : singleGameDrawResults) {
                double totalPayout = drawResults.getTotalPayout();
                GameDrawResultsPK gameDrawResultsPK =
                        drawResults.getGameDrawResultsPK();
                Integer categoryDescr = Integer.valueOf(
                        gameDrawResultsPK.getWinningCategoryDescr());
                payoutAmnt[categoryDescr] += totalPayout;
            }
        }
        for (int i = 1; i < payoutAmnt.length; i++) {
            String categoryDesc = new String();
            switch (i) {
                // Define category description
                case 1:
                    categoryDesc = "5+1";
                    break;
                case 2:
                    categoryDesc = "5";
                    break;
                case 3:
                    categoryDesc = "4+1";
                    break;
                case 4:
                    categoryDesc = "4";
                    break;
                case 5:
                    categoryDesc = "3+1";
                    break;
                case 6:
                    categoryDesc = "3";
                    break;
                case 7:
                    categoryDesc = "2+1";
                    break;
                case 8:
                    categoryDesc = "1+1";
                    break;
            }
            dataset.setValue(categoryDesc, removeDecimal(
                    payoutAmnt[i] / gameCounter, 1));
        }
         // Create pie chart instace
        JFreeChart chart = ChartFactory.createPieChart3D(
                "", // chart title                   
                dataset, // data 
                true, // include legend                   
                true,
                false);
        chart.setBackgroundPaint(new java.awt.Color(255, 255, 255));
        chart.setBorderPaint(new java.awt.Color(190, 139, 6));
        
        // Create PiePlot3D instance and specify settings and colors
        final PiePlot3D plot = (PiePlot3D) chart.getPlot();
        plot.setStartAngle(270);
        plot.setForegroundAlpha(0.60f);
        plot.setInteriorGap(0.02);
        plot.setSectionPaint("5+1", new java.awt.Color(32, 133, 236));
        plot.setSectionPaint("5", new java.awt.Color(114, 180, 235));
        plot.setSectionPaint("4+1", new java.awt.Color(235, 170, 0));
        plot.setSectionPaint("4", new java.awt.Color(255, 212, 20));
        plot.setSectionPaint("3+1", new java.awt.Color(219, 219, 219));
        plot.setSectionPaint("3", new java.awt.Color(110, 110, 110));
        plot.setSectionPaint("2+1", new java.awt.Color(50, 50, 50));
        plot.setSectionPaint("1+1", new java.awt.Color(10, 65, 122));
        plot.setLabelBackgroundPaint(new java.awt.Color(255, 237, 161));
        plot.setBackgroundPaint(new java.awt.Color(255, 255, 255));
        plot.setOutlinePaint(new java.awt.Color(255, 255, 255));
        plot.setLegendItemShape(new Rectangle(12,9));
        
        TextTitle legendText = new TextTitle("Κατηγορίες επιτυχιών: ");
        legendText.setPosition(RectangleEdge.BOTTOM);
        chart.addSubtitle(legendText);
        
        ChartPanel chartPanel = new ChartPanel(chart);

        displayChartPanel.setLayout(new java.awt.BorderLayout());
        displayChartPanel.add(chartPanel);
        displayChartPanel.validate();
    }
    
    //Removes decimal points of paremeter value beyond given paremeter decimalpoint 
    private static double removeDecimal(double value, int decimalpoint) {
        value = value * Math.pow(10, decimalpoint);
        value = Math.floor(value);
        value = value / Math.pow(10, decimalpoint);

        return value;
    }
    
    private void startWaiting(JPanel panel) {
        progressBar.setVisible(true);
        progressBar.setIndeterminate(true);
        progressBar.setValue(100);
        JPnlMain.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        panel.grabFocus();
    }
    private void stopWaiting() {
        JPnlMain.setCursor(null); //turn off the wait cursor
        progressBar.setIndeterminate(false);
        progressBar.setVisible(false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLbDateRangeTitle;
    private javax.swing.JLabel JLbFromDate;
    private javax.swing.JLabel JLbShowResultsIcon;
    private javax.swing.JLabel JLbShowResultsText;
    private javax.swing.JLabel JLbStatsTitle;
    private javax.swing.JLabel JLbToDate;
    private javax.swing.JPanel JPnlChartContainer;
    private javax.swing.JPanel JPnlDateRange;
    private javax.swing.JPanel JPnlDisplayResult;
    private javax.swing.JPanel JPnlFiller;
    private javax.swing.JPanel JPnlMain;
    private javax.swing.JPanel JPnlStatsSelection;
    private javax.swing.JPanel displayChartPanel;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel6;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerFrom;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerTo;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
