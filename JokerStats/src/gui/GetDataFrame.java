//TzokerStats
//pass

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import DataIngestion.DBIntegrator;
import DataIngestion.IApiIntegrator;
import DataIngestion.MultiDrawIntegrator;
import DataIngestion.SingleDrawIntegrator;
import javax.swing.JOptionPane;
import java.awt.Cursor;
import java.awt.Rectangle;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.GameDrawResults;
import model.WinningColumn;
import tzokerstats.FoundEntityException;
import tzokerstats.GUIValidationException;
import tzokerstats.NotFoundEntityException;

public class GetDataFrame extends javax.swing.JFrame {

    //Objectto manipulate the menu behaviour
    //private final MenuOverlay menuOverlay = new MenuOverlay();
    //List of API Responce objects for a DRAW
    private List<GameDrawResults> gameDrawResults;
    //List of API Responce for winning numbers
    private List<WinningColumn> winningColumns;

    private MenuOverlay menuOverlay = new MenuOverlay();

    /**
     * Creates new form GetDataFrame
     */
    public GetDataFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpSelectionOption = new javax.swing.ButtonGroup();
        JPnlTzokerDataPanel = new javax.swing.JPanel();
        JPnlGetDataFromAPI = new javax.swing.JPanel();
        JLblGetDataFromApiText = new javax.swing.JLabel();
        JLblGetDataFromApiIcon = new javax.swing.JLabel();
        JPnlInsertToDB = new javax.swing.JPanel();
        JLblInsertToDBText = new javax.swing.JLabel();
        JLblInsertToDBIcon = new javax.swing.JLabel();
        JPnlDeleteFromDB = new javax.swing.JPanel();
        JLblDeleteFromDBText = new javax.swing.JLabel();
        JLblDeleteFromDBIcon = new javax.swing.JLabel();
        JPnlDeleteAllDB = new javax.swing.JPanel();
        JLblDeleteAllDBText = new javax.swing.JLabel();
        JLblDeleteAllDBIcon = new javax.swing.JLabel();
        RadiofetchDataByID = new javax.swing.JRadioButton();
        JPnlSeperator01 = new javax.swing.JPanel();
        RadiofetchDataByDateRange = new javax.swing.JRadioButton();
        JPnlSearchlByID = new javax.swing.JPanel();
        JLblDrawID = new javax.swing.JLabel();
        JSpnrDrawID = new javax.swing.JSpinner();
        JPnlSeperator02 = new javax.swing.JPanel();
        JPnlSearchByDate = new javax.swing.JPanel();
        JlblDateFrom = new javax.swing.JLabel();
        jXDatePickerFrom = new org.jdesktop.swingx.JXDatePicker();
        JlblDateTo = new javax.swing.JLabel();
        jXDatePickerTo = new org.jdesktop.swingx.JXDatePicker();
        JPnlTables = new javax.swing.JPanel();
        JScrollDetailsDrawTable = new javax.swing.JScrollPane();
        JTblDetailsDrawTable = new javax.swing.JTable();
        progressBar = new javax.swing.JProgressBar();
        JScrollSummaryDrawTable = new javax.swing.JScrollPane();
        JTblSummaryDrawTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Διαχείριση Δεδομένων Τζόκερ");
        setResizable(false);

        JPnlTzokerDataPanel.setBackground(new java.awt.Color(190, 139, 6));
        setDefaults();

        JPnlGetDataFromAPI.setBackground(new java.awt.Color(190, 139, 6));
        JPnlGetDataFromAPI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JPnlGetDataFromAPI.setMinimumSize(new java.awt.Dimension(200, 55));
        JPnlGetDataFromAPI.setPreferredSize(new java.awt.Dimension(200, 55));
        JPnlGetDataFromAPI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JPnlGetDataFromAPIMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JPnlGetDataFromAPIMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JPnlGetDataFromAPIMouseExited(evt);
            }
        });
        JPnlGetDataFromAPI.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLblGetDataFromApiText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLblGetDataFromApiText.setForeground(new java.awt.Color(255, 255, 255));
        JLblGetDataFromApiText.setText("Άντληση Δεδομένων");
        JPnlGetDataFromAPI.add(JLblGetDataFromApiText, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 130, 50));

        JLblGetDataFromApiIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLblGetDataFromApiIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/cloud-download.png"))); // NOI18N
        JPnlGetDataFromAPI.add(JLblGetDataFromApiIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 40, 50));

        JPnlTzokerDataPanel.add(JPnlGetDataFromAPI);

        JPnlInsertToDB.setBackground(new java.awt.Color(190, 139, 6));
        JPnlInsertToDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JPnlInsertToDB.setEnabled(false);
        JPnlInsertToDB.setFocusable(false);
        JPnlInsertToDB.setMinimumSize(new java.awt.Dimension(200, 55));
        JPnlInsertToDB.setPreferredSize(new java.awt.Dimension(200, 55));
        JPnlInsertToDB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JPnlInsertToDBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JPnlInsertToDBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JPnlInsertToDBMouseExited(evt);
            }
        });
        JPnlInsertToDB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLblInsertToDBText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLblInsertToDBText.setForeground(new java.awt.Color(255, 255, 255));
        JLblInsertToDBText.setText("Εισαγωγή στην Β.Δ");
        JLblInsertToDBText.setEnabled(false);
        JPnlInsertToDB.add(JLblInsertToDBText, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 190, 50));

        JLblInsertToDBIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLblInsertToDBIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/floppy-disk.png"))); // NOI18N
        JLblInsertToDBIcon.setEnabled(false);
        JPnlInsertToDB.add(JLblInsertToDBIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 40, 50));

        JPnlTzokerDataPanel.add(JPnlInsertToDB);

        JPnlDeleteFromDB.setBackground(new java.awt.Color(190, 139, 6));
        JPnlDeleteFromDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JPnlDeleteFromDB.setMinimumSize(new java.awt.Dimension(200, 55));
        JPnlDeleteFromDB.setPreferredSize(new java.awt.Dimension(200, 55));
        JPnlDeleteFromDB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JPnlDeleteFromDBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JPnlDeleteFromDBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JPnlDeleteFromDBMouseExited(evt);
            }
        });
        JPnlDeleteFromDB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLblDeleteFromDBText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLblDeleteFromDBText.setForeground(new java.awt.Color(255, 255, 255));
        JLblDeleteFromDBText.setText("Διαγραφή απο την Β.Δ");
        JPnlDeleteFromDB.add(JLblDeleteFromDBText, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 190, 50));

        JLblDeleteFromDBIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLblDeleteFromDBIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/trash-can.png"))); // NOI18N
        JPnlDeleteFromDB.add(JLblDeleteFromDBIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 40, 50));

        JPnlTzokerDataPanel.add(JPnlDeleteFromDB);

        JPnlDeleteAllDB.setBackground(new java.awt.Color(190, 139, 6));
        JPnlDeleteAllDB.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        JPnlDeleteAllDB.setMinimumSize(new java.awt.Dimension(200, 55));
        JPnlDeleteAllDB.setName(""); // NOI18N
        JPnlDeleteAllDB.setPreferredSize(new java.awt.Dimension(200, 55));
        JPnlDeleteAllDB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JPnlDeleteAllDBMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JPnlDeleteAllDBMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JPnlDeleteAllDBMouseExited(evt);
            }
        });
        JPnlDeleteAllDB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLblDeleteAllDBText.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JLblDeleteAllDBText.setForeground(new java.awt.Color(255, 255, 255));
        JLblDeleteAllDBText.setText("Διαγραφή Όλων");
        JPnlDeleteAllDB.add(JLblDeleteAllDBText, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 0, 140, 50));

        JLblDeleteAllDBIcon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        JLblDeleteAllDBIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/trashcan.png"))); // NOI18N
        JPnlDeleteAllDB.add(JLblDeleteAllDBIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 40, 50));

        JPnlTzokerDataPanel.add(JPnlDeleteAllDB);

        btnGrpSelectionOption.add(RadiofetchDataByID);
        RadiofetchDataByID.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        RadiofetchDataByID.setForeground(new java.awt.Color(255, 255, 255));
        RadiofetchDataByID.setSelected(true);
        RadiofetchDataByID.setText("Επιλογή Δεδομένων με Κωδικό Κλήρωσης");
        RadiofetchDataByID.setOpaque(false);
        RadiofetchDataByID.setPreferredSize(new java.awt.Dimension(350, 23));
        JPnlTzokerDataPanel.add(RadiofetchDataByID);

        JPnlSeperator01.setOpaque(false);
        JPnlSeperator01.setPreferredSize(new java.awt.Dimension(45, 20));

        javax.swing.GroupLayout JPnlSeperator01Layout = new javax.swing.GroupLayout(JPnlSeperator01);
        JPnlSeperator01.setLayout(JPnlSeperator01Layout);
        JPnlSeperator01Layout.setHorizontalGroup(
            JPnlSeperator01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );
        JPnlSeperator01Layout.setVerticalGroup(
            JPnlSeperator01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        JPnlTzokerDataPanel.add(JPnlSeperator01);

        btnGrpSelectionOption.add(RadiofetchDataByDateRange);
        RadiofetchDataByDateRange.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        RadiofetchDataByDateRange.setForeground(new java.awt.Color(255, 255, 255));
        RadiofetchDataByDateRange.setText("Επιλογή Δεδομένων με εύρος ημερομηνιών");
        RadiofetchDataByDateRange.setMargin(new java.awt.Insets(0, 0, 0, 0));
        RadiofetchDataByDateRange.setMaximumSize(new java.awt.Dimension(185, 23));
        RadiofetchDataByDateRange.setMinimumSize(new java.awt.Dimension(185, 23));
        RadiofetchDataByDateRange.setOpaque(false);
        RadiofetchDataByDateRange.setPreferredSize(new java.awt.Dimension(350, 23));
        RadiofetchDataByDateRange.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RadiofetchDataByDateRangeItemStateChanged(evt);
            }
        });
        JPnlTzokerDataPanel.add(RadiofetchDataByDateRange);

        JPnlSearchlByID.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        JPnlSearchlByID.setMinimumSize(new java.awt.Dimension(70, 55));
        JPnlSearchlByID.setOpaque(false);
        JPnlSearchlByID.setPreferredSize(new java.awt.Dimension(370, 55));
        JPnlSearchlByID.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        JLblDrawID.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        JLblDrawID.setForeground(new java.awt.Color(255, 255, 255));
        JLblDrawID.setText("Κωδικός Κλήρωσης:");
        JLblDrawID.setPreferredSize(new java.awt.Dimension(110, 14));
        JPnlSearchlByID.add(JLblDrawID);

        JSpnrDrawID.setOpaque(false);
        JSpnrDrawID.setPreferredSize(new java.awt.Dimension(85, 25));
        JPnlSearchlByID.add(JSpnrDrawID);

        JPnlTzokerDataPanel.add(JPnlSearchlByID);

        JPnlSeperator02.setOpaque(false);
        JPnlSeperator02.setPreferredSize(new java.awt.Dimension(10, 20));

        javax.swing.GroupLayout JPnlSeperator02Layout = new javax.swing.GroupLayout(JPnlSeperator02);
        JPnlSeperator02.setLayout(JPnlSeperator02Layout);
        JPnlSeperator02Layout.setHorizontalGroup(
            JPnlSeperator02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        JPnlSeperator02Layout.setVerticalGroup(
            JPnlSeperator02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );

        JPnlTzokerDataPanel.add(JPnlSeperator02);

        JPnlSearchByDate.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        JPnlSearchByDate.setOpaque(false);
        JPnlSearchByDate.setPreferredSize(new java.awt.Dimension(370, 55));
        JPnlSearchByDate.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        JlblDateFrom.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        JlblDateFrom.setForeground(new java.awt.Color(255, 255, 255));
        JlblDateFrom.setText("Από:");
        JPnlSearchByDate.add(JlblDateFrom);

        jXDatePickerFrom.setEnabled(false);
        JPnlSearchByDate.add(jXDatePickerFrom);

        JlblDateTo.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        JlblDateTo.setForeground(new java.awt.Color(255, 255, 255));
        JlblDateTo.setText("Έως:");
        JPnlSearchByDate.add(JlblDateTo);

        jXDatePickerTo.setEnabled(false);
        JPnlSearchByDate.add(jXDatePickerTo);

        JPnlTzokerDataPanel.add(JPnlSearchByDate);

        JPnlTables.setOpaque(false);
        JPnlTables.setPreferredSize(new java.awt.Dimension(775, 400));
        JPnlTables.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JTblDetailsDrawTable.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        JTblDetailsDrawTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Κωδικός Κλήρωσης", "Κατηγορίες επιτυχιών", "Επιτυχίες", "Κέρδη ανά επιτυχία"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTblDetailsDrawTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTblDetailsDrawTableMouseClicked(evt);
            }
        });
        JScrollDetailsDrawTable.setViewportView(JTblDetailsDrawTable);
        if (JTblDetailsDrawTable.getColumnModel().getColumnCount() > 0) {
            JTblDetailsDrawTable.getColumnModel().getColumn(3).setHeaderValue("Κέρδη ανά επιτυχία");
        }

        JPnlTables.add(JScrollDetailsDrawTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 760, 180));

        progressBar.setPreferredSize(new java.awt.Dimension(146, 15));
        JPnlTables.add(progressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 760, 20));

        JTblSummaryDrawTable.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        JTblSummaryDrawTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Κωδικός Κλήρωσης", "Ημερομηνία Κλήρωσης", "Νικητήρια Στήλη"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTblSummaryDrawTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTblSummaryDrawTableMouseClicked(evt);
            }
        });
        JScrollSummaryDrawTable.setViewportView(JTblSummaryDrawTable);

        JPnlTables.add(JScrollSummaryDrawTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 760, 130));

        JPnlTzokerDataPanel.add(JPnlTables);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 838, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(JPnlTzokerDataPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 838, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 627, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(JPnlTzokerDataPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JPnlGetDataFromAPIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlGetDataFromAPIMouseClicked

        if (!JPnlGetDataFromAPI.isEnabled()) {
            return;
        }
        menuOverlay.setEnabled(JPnlInsertToDB, false);
        menuOverlay.setEnabled(JPnlDeleteFromDB, false);
        menuOverlay.setEnabled(JPnlDeleteAllDB, false);
        startWaiting((JPanel) evt.getSource());
        //Main import data from API  task. Executed in background thread
        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    //Get Selected options
                    String selectedDrawID = (((JSpinner.DefaultEditor) JSpnrDrawID.getEditor()).getTextField()).getText();
                    String fromDate = "", toDate = "";
                    //Due to api limitations we may perform multiple calls
                    //for a sing date range requested by user
                    int howManyAPICalls = 1;
                    //Search by dates use case
                    if (RadiofetchDataByDateRange.isSelected()) {
                        //User input validation
                        //From Date
                        jXDatePickerFrom.commitEdit();
                        if (jXDatePickerFrom.getDate() == null) {
                            throw new GUIValidationException("Παρακαλώ εισάγετε αρχική ημερομηνία.");
                        }
                        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        fromDate = dateFormat.format(jXDatePickerFrom.getDate());
                        //ToDate                                                
                        jXDatePickerTo.commitEdit();
                        if (jXDatePickerTo.getDate() == null) {
                            throw new GUIValidationException("Παρακαλώ εισάγετε τελική ημερομηνία.");
                        }
                        toDate = dateFormat.format(jXDatePickerTo.getDate());

                        Date selectedDateFrom = jXDatePickerFrom.getDate();
                        Date selectedDateTo = jXDatePickerTo.getDate();
                        howManyAPICalls = (getDateDiff(selectedDateFrom, selectedDateTo) / 15) + 1;
                    }
                    //Change UI to depict work done in the backround
                    menuOverlay.setEnabled(JPnlGetDataFromAPI, false);
                    //Format Tables
                    DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
                    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                    rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
                    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                    JTblDetailsDrawTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                    JTblDetailsDrawTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                    JTblDetailsDrawTable.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
                    JTblDetailsDrawTable.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
                    JTblSummaryDrawTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                    //Prepare table models
                    DefaultTableModel detailsDrawModel = (DefaultTableModel) JTblDetailsDrawTable.getModel();
                    DefaultTableModel summaryDrawModel = (DefaultTableModel) JTblSummaryDrawTable.getModel();
                    detailsDrawModel.setRowCount(0);
                    summaryDrawModel.setRowCount(0);

                    if (!Objects.isNull(gameDrawResults)) {
                        gameDrawResults.clear();
                    }
                    if (!Objects.isNull(winningColumns)) {
                        winningColumns.clear();
                    }
                    //Split API Calls if this is the case
                    //of a large date range selection by the user.
                    for (int j = 0; j < howManyAPICalls; j++) {
                        //We use polymorphism to get data from API                                                            
                        IApiIntegrator drawIntegrator;
                        if (RadiofetchDataByID.isSelected()) {
                            IApiIntegrator singleDrawIntegrator = new SingleDrawIntegrator();
                            singleDrawIntegrator.addAPIargument("gameID", "5104");
                            singleDrawIntegrator.addAPIargument("drawID", selectedDrawID);
                            drawIntegrator = singleDrawIntegrator;
                        } else {

                            Calendar cFrom = Calendar.getInstance();
                            Calendar cTo = Calendar.getInstance();
                            cFrom.setTime(jXDatePickerFrom.getDate());
                            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                            cFrom.add(Calendar.DATE, (15 * j));
                            fromDate = dateFormat.format(cFrom.getTime());
                            cTo = cFrom;
                            cTo.add(Calendar.DATE, 14);
                            if (cTo.getTime().after(jXDatePickerTo.getDate())) {
                                cTo.setTime(jXDatePickerTo.getDate());
                            }
                            toDate = dateFormat.format(cTo.getTime());
                            //Get Multidraw objects                            
                            IApiIntegrator multiDrawIntegrator = new MultiDrawIntegrator();
                            multiDrawIntegrator.addAPIargument("gameID", "5104");
                            multiDrawIntegrator.addAPIargument("fromDate", fromDate);
                            multiDrawIntegrator.addAPIargument("toDate", toDate);
                            drawIntegrator = multiDrawIntegrator;
                        }
                        //Fetch data
                        drawIntegrator.loadDataFromAPI();
                        List<GameDrawResults> gameDrawResults_Current = (List<GameDrawResults>) drawIntegrator.getDataObject(GameDrawResults.class);
                        List<WinningColumn> winningColumns_Current = (List<WinningColumn>) drawIntegrator.getDataObject(WinningColumn.class);

                        if (Objects.isNull(gameDrawResults)) {
                            gameDrawResults = (List<GameDrawResults>) drawIntegrator.getDataObject(GameDrawResults.class);
                        } else {
                            //Append at the top to maintain table sorting on draw_id, Win Category
                            gameDrawResults.addAll(0, gameDrawResults_Current);
                        }
                        if (Objects.isNull(winningColumns)) {
                            winningColumns = (List<WinningColumn>) drawIntegrator.getDataObject(WinningColumn.class);
                        } else {
                            //Append at the top to maintain sorting on draw_id
                            winningColumns.addAll(0, winningColumns_Current);
                        }
                    }
                    //Check Results
                    if (gameDrawResults.size() < 1) {
                        JOptionPane.showMessageDialog(null, "Δεν βρέθηκαν δεδομένα με τα συγκεκριμένα κριτήρια. ",
                                "Αντληση δεδομένων",
                                JOptionPane.INFORMATION_MESSAGE);
                        menuOverlay.setEnabled(JPnlInsertToDB, false);
                        menuOverlay.setEnabled(JPnlDeleteFromDB, false);
                        menuOverlay.setEnabled(JPnlDeleteAllDB, true);
                    } else {
                        //Prepare Formaters
                        Object[] detailsDrawData = new Object[4];
                        Object[] summaryDrawData = new Object[3];
                        DecimalFormat decimalFormat = new DecimalFormat("#,###.00");
                        DecimalFormat IntFormatter = new DecimalFormat("#,###");
                        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy");
                        //add table rows for Details table
                        for (int i = 0; i < gameDrawResults.size(); i++) {
                            detailsDrawData[0] = gameDrawResults.get(i).getGameDrawResultsPK().getDrawId();
                            detailsDrawData[1] = gameDrawResults.get(i).getGameDrawResultsPK().getWinningCategoryDescr();
                            detailsDrawData[2] = IntFormatter.format((Number) gameDrawResults.get(i).getSuccessesCnt());
                            detailsDrawData[3] = decimalFormat.format((Number) gameDrawResults.get(i).getDividentAmn());
                            detailsDrawModel.addRow(detailsDrawData);
                        }
                        //add rows for Summary Draw Table
                        for (int i = 0; i < winningColumns.size(); i++) {
                            summaryDrawData[0] = winningColumns.get(i).getWinningColumnPK().getDrawId();
                            summaryDrawData[1] = simpleDateFormat.format(winningColumns.get(i).getDrawTime());
                            summaryDrawData[2] = winningColumns.get(i).getWinningColumnDescr();
                            summaryDrawModel.addRow(summaryDrawData);
                        }
                        //Enable menu option based on results rowcount
                        menuOverlay.setEnabled(JPnlInsertToDB, detailsDrawModel.getRowCount() > 0);
                        menuOverlay.setEnabled(JPnlDeleteFromDB, detailsDrawModel.getRowCount() > 0);
                        System.out.println("Data Fetch operation completed Succesfully!");
                    }
                } catch (GUIValidationException e) {
                    JOptionPane.showMessageDialog(null, "Παρουσιάστηκε σφάλμα κατα την άντληση των δεδομένων. " + e.getMessage(),
                            "Σφάλμα κατα την άντληση δεδομένων",
                            JOptionPane.ERROR_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Παρουσιάστηκε σφάλμα κατα την άντληση των δεδομένων." + e.getMessage(), "Δεν Αντλήθηκαν δεδομένα.", JOptionPane.ERROR_MESSAGE);
                    // JOptionPane.showMessageDialog(null, "Δεν βρέθηκαν δεδομένα", "API call error", JOptionPane.ERROR_MESSAGE);
                    System.out.println(e);
                } finally {
                    //Restore initial UI status
                    stopWaiting();
                    menuOverlay.setEnabled((JPanel) evt.getSource(), true);
                    menuOverlay.setEnabled(JPnlDeleteFromDB, true);
                    menuOverlay.setEnabled(JPnlDeleteAllDB, true);
                }
                return null;
            }
        };
        mySwingWorker.execute();
    }//GEN-LAST:event_JPnlGetDataFromAPIMouseClicked

    private void JPnlGetDataFromAPIMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlGetDataFromAPIMouseEntered
        menuOverlay.setHilighted((JPanel) evt.getSource(), true);
    }//GEN-LAST:event_JPnlGetDataFromAPIMouseEntered

    private void JPnlGetDataFromAPIMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlGetDataFromAPIMouseExited
        menuOverlay.setHilighted((JPanel) evt.getSource(), false);
    }//GEN-LAST:event_JPnlGetDataFromAPIMouseExited

    private void JPnlInsertToDBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlInsertToDBMouseEntered
        menuOverlay.setHilighted((JPanel) evt.getSource(), true);
    }//GEN-LAST:event_JPnlInsertToDBMouseEntered

    private void JPnlInsertToDBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlInsertToDBMouseExited
        menuOverlay.setHilighted((JPanel) evt.getSource(), false);
    }//GEN-LAST:event_JPnlInsertToDBMouseExited

    private void JPnlDeleteFromDBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDeleteFromDBMouseEntered
        menuOverlay.setHilighted((JPanel) evt.getSource(), true);
    }//GEN-LAST:event_JPnlDeleteFromDBMouseEntered

    private void JPnlDeleteFromDBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDeleteFromDBMouseExited
        menuOverlay.setHilighted((JPanel) evt.getSource(), false);
    }//GEN-LAST:event_JPnlDeleteFromDBMouseExited

    private void JPnlInsertToDBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlInsertToDBMouseClicked

        if (!JPnlInsertToDB.isEnabled()) {
            return;
        }
        menuOverlay.setEnabled(JPnlGetDataFromAPI, false);
        menuOverlay.setEnabled(JPnlDeleteFromDB, false);
        menuOverlay.setEnabled(JPnlDeleteAllDB, false);
        startWaiting((JPanel) evt.getSource());
        //Save data to DB. Executed in background thread
        SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    menuOverlay.setEnabled((JPanel) evt.getSource(), false);
                    if (!DBIntegrator.isDrawResultsReadyForInsert(winningColumns, gameDrawResults)) {
                        //there are rows allready in the DB                        
                        Object[] options = {"Όχι", "Ναι"};
                        int userSelection = JOptionPane.showOptionDialog(null,
                                "Κάποιες κληρώσεις βρέθηκαν στην βάση. Θέλετε να εισηχθούν όσες ΔΕΝ βρέθηκαν;",
                                "Μερική εισαγωγή κληρώσεων στην βάση",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                options,
                                options[0]);

                        if (userSelection == 1) {
                            //Insert applicable only Draws
                            //Attempt to write to DB
                            DBIntegrator.setDrawResults(winningColumns, gameDrawResults, DBIntegrator.Operation.FORCE_INSERT);
                            JOptionPane.showMessageDialog(null, "H μερική εισαγωγή των δεδομένων ολοκληρώθηκε με επιτυχία",
                                    "Μερική εισαγωγή κληρώσεων στην βάση", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "H εισαγωγή των δεδομένων ακυρώθηκε",
                                    "Δεν Εισήχθησαν Δεδομένα", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } //All rows can be inserted
                    else {
                        //Attempt to insert data to DB
                        DBIntegrator.setDrawResults(winningColumns, gameDrawResults, DBIntegrator.Operation.INSERT);
                        JOptionPane.showMessageDialog(null, "H εισαγωγή των δεδομένων ολοκληρώθηκε με επιτυχία",
                                "Τα Δεδομένα Εισηχθησαν", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (FoundEntityException e) {
                    JOptionPane.showMessageDialog(null, e.getMessage(), "Δεν Εισήχθησαν Δεδομένα", JOptionPane.ERROR_MESSAGE);
                    System.out.println(e);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Παρουσιάστηκε σφάλμα κατα την εισαγωγή των δεδομένων στην βάση:\n"
                            + e.getMessage(), "Δεν Εισήχθησαν Δεδομένα", JOptionPane.ERROR_MESSAGE);
                    System.out.println(e);
                } finally {
                    //Restore initial UI status
                    stopWaiting();
                    menuOverlay.setEnabled((JPanel) evt.getSource(), true);
                    menuOverlay.setEnabled(JPnlDeleteAllDB, true);
                    menuOverlay.setEnabled(JPnlDeleteFromDB, true);
                    menuOverlay.setEnabled(JPnlGetDataFromAPI, true);
                }
                return null;
            }
        };
        mySwingWorker.execute();
    }//GEN-LAST:event_JPnlInsertToDBMouseClicked

    private void JTblDetailsDrawTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTblDetailsDrawTableMouseClicked
        int column = 0;
        int row = JTblDetailsDrawTable.getSelectedRow();
        String value = JTblDetailsDrawTable.getModel().getValueAt(row, column).toString();
        int i = getRowByValue(JTblSummaryDrawTable.getModel(), value);
        JTblSummaryDrawTable.getSelectionModel().setSelectionInterval(i, i);
        JTblSummaryDrawTable.scrollRectToVisible(new Rectangle(JTblSummaryDrawTable.getCellRect(i, 0, true)));
    }//GEN-LAST:event_JTblDetailsDrawTableMouseClicked

    private void JPnlDeleteFromDBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDeleteFromDBMouseClicked

        if (!JPnlDeleteFromDB.isEnabled()) {
            return;
        }
        Object[] options = {"Όχι", "Ναι"};
        int userSelection = JOptionPane.showOptionDialog(null,
                "Θέλετε σίγουρα να διαγράψετε τα δεδομένα των κληρώσεων από τη βάση;",
                "Διαγραφή των κληρώσεων απο την βάση",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        if (userSelection == 1) {
            //Delete for applicable only Draws
            menuOverlay.setEnabled(JPnlGetDataFromAPI, false);
            menuOverlay.setEnabled(JPnlDeleteAllDB, false);
            menuOverlay.setEnabled(JPnlInsertToDB, false);
            startWaiting((JPanel) evt.getSource());
            //Executed in background thread
            SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    try {
                        menuOverlay.setEnabled((JPanel) evt.getSource(), false);
                        //Get Selected options
                        String selectedDrawID = (((JSpinner.DefaultEditor) JSpnrDrawID.getEditor()).getTextField()).getText();
                        String fromDate = "";
                        String toDate = "";
                        if (RadiofetchDataByID.isSelected()) {
                            int DrawsDeletedByID = DBIntegrator.deleteDrawDataWithID("5104", selectedDrawID);
                            JOptionPane.showMessageDialog(null, "H διαγραφή των δεδομένων με βάση το Draw ID ολοκληρώθηκε με επιτυχία. \nΔιαγράφηκαν τα δεδομένα για την κλήρωση #" + selectedDrawID,
                                    "Τα δεδομένα Διαγράφηκαν", JOptionPane.INFORMATION_MESSAGE);

                        } else if (RadiofetchDataByDateRange.isSelected()) {
                            jXDatePickerFrom.commitEdit();
                            if (jXDatePickerFrom.getDate() == null) {
                                throw new GUIValidationException("Παρακαλώ εισάγετε αρχική ημερομηνία.");
                            }
                            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                            fromDate = dateFormat.format(jXDatePickerFrom.getDate());
                            //ToDate                                                
                            jXDatePickerTo.commitEdit();
                            if (jXDatePickerTo.getDate() == null) {
                                throw new GUIValidationException("Παρακαλώ εισάγετε τελική ημερομηνία.");
                            }
                            toDate = dateFormat.format(jXDatePickerTo.getDate());
                            int DrawsDeletedByDate = DBIntegrator.deleteDrawDataWithDateRange("5104", fromDate, toDate);
                            JOptionPane.showMessageDialog(null, "H διαγραφή των δεδομένων με βάση χρονικό διάστημα ολοκληρώθηκε με επιτυχία. \nΔιαγράφηκαν τα δεδομένα για " + DrawsDeletedByDate + " κληρώσεις",
                                    "Τα δεδομένα Διαγράφηκαν", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (NotFoundEntityException e) {
                        JOptionPane.showMessageDialog(null, e.getMessage(), "Δεν Διαγράφηκαν Δεδομένα", JOptionPane.ERROR_MESSAGE);
                        System.out.println(e);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Παρουσιάστηκε σφάλμα κατα την διαγραφή των δεδομένων απο την βάση.\n" + e.getMessage(),
                                "Δεν Διαγράφηκαν Δεδομένα", JOptionPane.ERROR_MESSAGE);
                        System.out.println(e);
                    } finally {
                        //Restore initial UI status
                        menuOverlay.setEnabled((JPanel) evt.getSource(), true);
                        menuOverlay.setEnabled(JPnlGetDataFromAPI, true);                        
                        menuOverlay.setEnabled(JPnlDeleteAllDB, true);
                        if (!(Objects.isNull(gameDrawResults) || gameDrawResults.size() < 1)) {
                            menuOverlay.setEnabled(JPnlInsertToDB, true);
                        }
                        stopWaiting();
                    }
                    return null;
                }
            };
            mySwingWorker.execute();
        }
    }//GEN-LAST:event_JPnlDeleteFromDBMouseClicked

    private void JPnlDeleteAllDBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDeleteAllDBMouseClicked

        if (!JPnlDeleteAllDB.isEnabled()) {
            return;
        }
        Object[] options = {"Όχι δεν θελω να διαγράψω τα πάντα", "Ναι"};
        int userSelection = JOptionPane.showOptionDialog(null,
                "Θέλετε σίγουρα να διαγράψετε ολες τις κληρώσεις από τη βάση δεδομένων;",
                "Διαγραφή ΟΛΩΝ των κληρώσεων απο την βάση",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);
        if (userSelection == 1) {
            menuOverlay.setEnabled(JPnlInsertToDB, false);
            menuOverlay.setEnabled(JPnlGetDataFromAPI, false);
            menuOverlay.setEnabled(JPnlDeleteFromDB, false);
            startWaiting((JPanel) evt.getSource());
            SwingWorker<Void, Void> mySwingWorker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    try {
                        menuOverlay.setEnabled((JPanel) evt.getSource(), false);
                        DBIntegrator.deleteALLDrawResults();
                        clearTables();
                        JOptionPane.showMessageDialog(null, "H Διαγραφή ΟΛΩΝ των δεδομένων ολοκληρώθηκε με επιτυχία",
                                "Τα δεδομένα Διαγράφηκαν", JOptionPane.INFORMATION_MESSAGE);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Παρουσιάστηκε σφάλμα κατα την διαγραφή των δεδομένων απο την βάση",
                                "Δεν Διαγράφηκαν Δεδομένα", JOptionPane.ERROR_MESSAGE);
                        System.out.println(e);
                    } finally {
                        stopWaiting();
                        menuOverlay.setEnabled(JPnlInsertToDB, false);
                        menuOverlay.setEnabled(JPnlDeleteFromDB, false);
                        menuOverlay.setEnabled((JPanel) evt.getSource(), true);
                        menuOverlay.setEnabled(JPnlGetDataFromAPI, true);
                    }
                    return null;
                }
            };
            mySwingWorker.execute();
        }
    }//GEN-LAST:event_JPnlDeleteAllDBMouseClicked

    private void JPnlDeleteAllDBMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDeleteAllDBMouseEntered
        menuOverlay.setHilighted((JPanel) evt.getSource(), true);
    }//GEN-LAST:event_JPnlDeleteAllDBMouseEntered

    private void JPnlDeleteAllDBMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPnlDeleteAllDBMouseExited
        menuOverlay.setHilighted((JPanel) evt.getSource(), false);
    }//GEN-LAST:event_JPnlDeleteAllDBMouseExited

    private void RadiofetchDataByDateRangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RadiofetchDataByDateRangeItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) {
            menuOverlay.setEnabled(JPnlSearchByDate, true);
            menuOverlay.setEnabled(JPnlSearchlByID, false);
        } else if (evt.getStateChange() == evt.DESELECTED) {
            menuOverlay.setEnabled(JPnlSearchByDate, false);
            menuOverlay.setEnabled(JPnlSearchlByID, true);
        }
    }//GEN-LAST:event_RadiofetchDataByDateRangeItemStateChanged

    private void JTblSummaryDrawTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTblSummaryDrawTableMouseClicked
        int column = 0;
        int row = JTblSummaryDrawTable.getSelectedRow();
        String value = JTblSummaryDrawTable.getModel().getValueAt(row, column).toString();
        int i = getRowByValue(JTblDetailsDrawTable.getModel(), value);
        JTblDetailsDrawTable.getSelectionModel().setSelectionInterval(i, i);
        JTblDetailsDrawTable.scrollRectToVisible(new Rectangle(JTblDetailsDrawTable.getCellRect(i, 0, true)));
    }//GEN-LAST:event_JTblSummaryDrawTableMouseClicked

    private int getRowByValue(TableModel model, String value) {
        //for (int i = model.getRowCount() - 1; i >= 0; --i) {
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 0).toString().equals(value)) {
                // return the index of the first row for thee value
                return i;
            }
        }
        return -1;
    }

    private void startWaiting(JPanel panel) {
        progressBar.setVisible(true);
        progressBar.setIndeterminate(true);
        progressBar.setValue(100);
        JPnlTzokerDataPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        panel.grabFocus();
    }

    private void stopWaiting() {
        JPnlTzokerDataPanel.setCursor(null); //turn off the wait cursor
        progressBar.setIndeterminate(false);
        progressBar.setVisible(false);
    }

    private void clearTables() {
        DefaultTableModel detailsDrawModel = (DefaultTableModel) JTblDetailsDrawTable.getModel();
        DefaultTableModel summaryDrawModel = (DefaultTableModel) JTblSummaryDrawTable.getModel();
        detailsDrawModel.setRowCount(0);
        summaryDrawModel.setRowCount(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLblDeleteAllDBIcon;
    private javax.swing.JLabel JLblDeleteAllDBText;
    private javax.swing.JLabel JLblDeleteFromDBIcon;
    private javax.swing.JLabel JLblDeleteFromDBText;
    private javax.swing.JLabel JLblDrawID;
    private javax.swing.JLabel JLblGetDataFromApiIcon;
    private javax.swing.JLabel JLblGetDataFromApiText;
    private javax.swing.JLabel JLblInsertToDBIcon;
    private javax.swing.JLabel JLblInsertToDBText;
    private javax.swing.JPanel JPnlDeleteAllDB;
    private javax.swing.JPanel JPnlDeleteFromDB;
    private javax.swing.JPanel JPnlGetDataFromAPI;
    private javax.swing.JPanel JPnlInsertToDB;
    private javax.swing.JPanel JPnlSearchByDate;
    private javax.swing.JPanel JPnlSearchlByID;
    private javax.swing.JPanel JPnlSeperator01;
    private javax.swing.JPanel JPnlSeperator02;
    private javax.swing.JPanel JPnlTables;
    private javax.swing.JPanel JPnlTzokerDataPanel;
    private javax.swing.JScrollPane JScrollDetailsDrawTable;
    private javax.swing.JScrollPane JScrollSummaryDrawTable;
    private javax.swing.JSpinner JSpnrDrawID;
    private javax.swing.JTable JTblDetailsDrawTable;
    private javax.swing.JTable JTblSummaryDrawTable;
    private javax.swing.JLabel JlblDateFrom;
    private javax.swing.JLabel JlblDateTo;
    private javax.swing.JRadioButton RadiofetchDataByDateRange;
    private javax.swing.JRadioButton RadiofetchDataByID;
    private javax.swing.ButtonGroup btnGrpSelectionOption;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerFrom;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerTo;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

    //Prepare panel UI on post init
    private void setDefaults() {
        progressBar.setVisible(false);
        JPnlInsertToDB.setEnabled(false);
        SpinnerModel sm = new SpinnerNumberModel(1, 1, 999999, 1);
        JSpnrDrawID.setModel(sm);
        JSpnrDrawID.setEditor(new JSpinner.NumberEditor(JSpnrDrawID, "#"));
        jXDatePickerFrom.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
        jXDatePickerTo.setFormats(new SimpleDateFormat("dd/MM/yyyy"));
    }

    private int getDateDiff(Date firstDate, Date secondDate) {
        long diffInMillies = Math.abs(secondDate.getTime() - firstDate.getTime());
        return (int) TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);
    }

}
